define("Debug",["log","underscore"],function(n,t){return function(e){!0===e.Debug&&(t.has(e,"Comparator")&&t.has(e.Comparator,"Object")&&!0===e.Comparator.Object?(n("Result: "+JSON.stringify(e.Result)),n("Expected: "+JSON.stringify(e.ExpectedOutput))):(n("Result: "+e.Result),n("Expected: "+e.ExpectedOutput)))}}),define("Setup",["underscore"],function(n){return function(t){return n.isFunction(t)?t():t}}),define("AsyncSetup",["Setup","promise"],function(n,t){return function(e){return t(function(t){t(n(e))})}}),define("bIsObjectEqual",[],function(){function n(n){var t=JSON.stringify(n.Comparator),e=JSON.stringify(n.Comparand),u=!0;if(t.length==e.length)for(var r=0;r<t.length;r++)t[r]!==e[r]&&(u=!1);else u=!1;return u}return n}),define("AsyncAssertion",["promise","underscore","bIsObjectEqual"],function(n,t,e){return function(u){return n(function(n){t.has(u,"ComparisonFunction")?u.ComparisonFunction(u).then(function(t){n(t)}):n(t.has(u,"Comparator")&&t.has(u.Comparator,"Object")&&!0===u.Comparator.Object?e({Comparator:u.Result,Comparand:u.ExpectedOutput}):u.Result===u.ExpectedOutput)})}}),define("AsyncTest",["promise","Debug","AsyncSetup","AsyncAssertion"],function(n,t,e,u){return function(r){return{Name:r.Name,Run:function(){return n(function(n){e(r.Input).then(function(e){r.Function(e).then(function(e){r.Result=e,t(r),u(r).then(function(t){n(t)})})})})}}}});