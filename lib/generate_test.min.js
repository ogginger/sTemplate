define("validate",["underscore","log"],function(n,t){return function(t){if(n.has(t,"Validation")){if(!1===n.isArray(t.Validation))throw{message:"Error: Validation type was not array!"};if(!1===n.every(t.Validation,function(t){return n.isFunction(t)})&&!1===n.isEmpty(t.Validation))throw{message:"Error: Validation element type was not function!"};return n.every(t.Validation,function(n){return n(t.Data)})}}}),define("xGenerateTestValidation",["underscore","log"],function(n,t){return[function(t){if(!1===n.has(t,"Name"))throw{message:"Error: Input did not have a Name!"};if(!1===n.isString(t.Name))throw{message:"Error: Input name type was not string!"};return!0},function(t){if(!1===n.has(t,"Input"))throw{message:"Error: Input did not have an Input!"};return!0},function(t){if(!1===n.has(t,"Function"))throw{message:"Error: Input did not have a Function!"};if(!1===n.isFunction(t.Function))throw{message:"Error: Input function type was not function!"};return!0},function(t){if(!1===n.has(t,"ExpectedOutput"))throw{message:"Error: Input did not have an ExpectedOutput!"}}]}),define("Setup",["underscore"],function(n){return function(t){return n.isFunction(t)?t():t}}),define("Assertion",["underscore"],function(n){return function(t){return n.has(t,"ComparisonFunction")?t.ComparisonFunction(t):t.Result===t.ExpectedOutput}}),define("Test",["Setup","Assertion"],function(n,t){return function(e){return{Name:e.Name,Run:function(){return e.Input=n(e.Input),e.Result=e.Function(e.Input),t(e)}}}}),define("xGenerateTest",["log","validate","xGenerateTestValidation","Test"],function(n,t,e,r){return function(n){return t({Data:n,Validation:e}),r(n)}});